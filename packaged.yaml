AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  InputApplicationTagName:
    Description: Tag used for the resources.
    Type: String
  InputUserPoolName:
    Description: Name of UserPool resource.
    Type: String
  InputRefreshTokenValidity:
    Description: The time limit, in days, after which the refresh token is no longer
      valid and cannot be used.
    Type: String
  InputClientName:
    Description: The client name for the user pool client.
    Type: String
  carTableName:
    Type: String
    Default: car
    Description: (Required) The name of the new DynamoDB table you want to create
      and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: Required parameter. Must be characters only. No numbers
      allowed.
  carModelTableName:
    Type: String
    Default: carmodel
    Description: (Required) The name of the new DynamoDB table you want to create
      and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: Required parameter. Must be characters only. No numbers
      allowed.
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - MyAuthFunction
              - Arn
  ModelSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.modelSearchService
      Runtime: nodejs14.x
      CodeUri: s3://ccwbucketiit/5caa406ba1758a6397c585ed0e9c6ed4
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: carModelTableName
      Environment:
        Variables:
          TABLE_NAME1:
            Ref: carModelTableName
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /get-car-model/{modelName}
            Method: GET
      Timeout: 100
  PriceRetrievalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.priceRetrievalService
      Runtime: nodejs14.x
      CodeUri: s3://ccwbucketiit/5caa406ba1758a6397c585ed0e9c6ed4
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: carTableName
      Environment:
        Variables:
          TABLE_NAME:
            Ref: carTableName
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /get-car-price/{itemId}
            Method: GET
      Timeout: 100
  OptionsRetrievalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.optionsRetrievalService
      Runtime: nodejs14.x
      CodeUri: s3://ccwbucketiit/5caa406ba1758a6397c585ed0e9c6ed4
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: carTableName
      Environment:
        Variables:
          TABLE_NAME:
            Ref: carTableName
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /get-car-options/{itemId}
            Method: GET
      Timeout: 100
  CarDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: carTableName
      AttributeDefinitions:
      - AttributeName: itemId
        AttributeType: S
      KeySchema:
      - AttributeName: itemId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  CarModelDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: carModelTableName
      AttributeDefinitions:
      - AttributeName: modelId
        AttributeType: S
      KeySchema:
      - AttributeName: modelId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ccwbucketiit/7e15e29666b202f14490acbc5cac415a
      Handler: handler.authorizer
      Runtime: nodejs14.x
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Policy_api-lambda-db
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:TagResource
            - dynamodb:UntagResource
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:AttachNetworkInterface
            Resource: '*'
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /service-role/
      Policies:
      - PolicyName: CodeBuildAccessPolicies
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Sample-CodeBuildProject
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Location: https://github.com/sachindilan/CCCW1.git
        Type: GITHUB
        Auth:
          Type: OAUTH
          Resource: gittoken123456789
      SourceVersion: master
      Triggers:
        Webhook: true
        FilterGroups:
        - - Type: EVENT
            Pattern: PUSH
            ExcludeMatchedPattern: false
          - Type: HEAD_REF
            Pattern: refs/heads/master
            ExcludeMatchedPattern: false
      TimeoutInMinutes: 10
  UserPoolResource:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: InputUserPoolName
      UserPoolTags:
        application:
          Ref: InputApplicationTagName
  UserPoolClientResource:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - client_credentials
      GenerateSecret: 'true'
      ClientName:
        Ref: InputClientName
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity:
        Ref: InputRefreshTokenValidity
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - Fn::Join:
            - "/"
            - - Ref: InputUserPoolName
              - read_operation
        - Fn::Join:
            - "/"
            - - Ref: InputUserPoolName
              - create_operation
        - Fn::Join:
            - "/"
            - - Ref: InputUserPoolName
              - delete_operation
      UserPoolId:
        Ref: UserPoolResource
    DependsOn:
      - UserPoolResourceServerResource
  UserPoolResourceServerResource:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId:
        Ref: UserPoolResource
      Identifier:
        Ref: InputUserPoolName
      Name:
        Ref: InputUserPoolName
      Scopes:
        - ScopeName: read_operation
          ScopeDescription: read operation
        - ScopeName: create_operation
          ScopeDescription: create operation
        - ScopeName: delete_operation
          ScopeDescription: delete operation
  UserPoolDomainResource:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: InputUserPoolName
      UserPoolId:
        Ref: UserPoolResource
Outputs:
  UserPoolARN:
    Value:
      Fn::GetAtt:
        - UserPoolResource
        - Arn
  UserPoolProviderURL:
    Value:
      Fn::GetAtt:
        - UserPoolResource
        - ProviderURL
  UserPoolProviderName:
    Value:
      Fn::GetAtt:
        - UserPoolResource
        - ProviderName
  UserPoolID:
    Value:
      Ref: UserPoolResource
  Region:
    Description: Region
    Value:
      Ref: AWS::Region
  ApiId:
    Description: API ID
    Value:
      Ref: MyApi
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
