AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:

  LambdaFuncName:
    Type: String
    Default: Lambdavehiclefunction

  carModelTableName:
      Type: String
      Default: carmodel
      Description: (Required) The name of the new DynamoDB table you want to create and save to. Minimum 3 characters
      MinLength: 3
      MaxLength: 50
      AllowedPattern: ^[A-Za-z]+$
      ConstraintDescription: Required parameter. Must be characters only. No numbers allowed.

Resources:

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers: 
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt MyAuthFunction.Arn
    

  ModelSearchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        Ref: LambdaFuncName
      Handler: handler.modelSearchService
      Runtime: nodejs14.x
      Role: !GetAtt IAMRole.Arn
      CodeUri: .
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref carModelTableName
      Environment:
        Variables:
          TABLE_NAME1: !Ref carModelTableName 
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /get-car-model/{modelName}
            Method: GET
      Timeout: 100

  CarModelDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref carModelTableName
      AttributeDefinitions:
        - AttributeName: modelId
          AttributeType: S
      KeySchema:
        - AttributeName: modelId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  MyAuthFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./authorizer
      Handler: handler.authorizer
      Runtime: nodejs14.x
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
              - Effect: Allow
                Action:
                  - "lambda:InvokeAsync"
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeFunction"
                  - "lambda:CreateFunction"
                  - "lambda:DeleteFunction"
                  - "lambda:GetFunction"
                  - "lambda:ListFunctions"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:GetFunctionConfiguration"
                  - "lambda:UpdateFunctionConfiguration"
                Resource: '*'
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
#      Path: /service-role/
      Policies:
        - PolicyName: "CodeBuildAccessPolicies"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                  - 'lambda:UpdateFunctionCode'
                Resource: '*'
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Sample-CodeBuildProject
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Location: https://github.com/sachindilan/CCCW1.git  # CHANGE HERE --> Add GIT URL
        Type: GITHUB
        Auth:
          Type: OAUTH
          Resource: b04776caf65d2cb55a24365b07a6e0260f514d37  # CHANGE HERE --> Add GIT Auth key
      SourceVersion: master   # CHANGE HERE --> Add Branch Name
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
              ExcludeMatchedPattern: false
            - Type: HEAD_REF
              Pattern: refs/heads/master  # CHANGE HERE --> Add Branch Name
              ExcludeMatchedPattern: false
      TimeoutInMinutes: 10
Outputs:

  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/'
